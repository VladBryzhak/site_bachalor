const express = require('express');
const cors = require('cors');
const axios = require('axios');
const cheerio = require('cheerio');

const app = express();
app.use(cors());
app.use(express.json());

// –ê–Ω–∞–ª—ñ–∑ —Å–∞–π—Ç—É –∑–∞ URL
app.post('/analyze', async (req, res) => {
  const { url } = req.body;

  if (!url || !url.startsWith('http')) {
    return res.status(400).json({ result: '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (http/https).' });
  }

  try {
    const response = await axios.get(url);
    const $ = cheerio.load(response.data);

    const scriptCount = $('script').length;
    const inputCount = $('input, textarea, select').length;
    const buttonCount = $('button').length;
    const divCount = $('div').length;
    const componentsWithClasses = $('[class]').length;
    const reactHints = $('[data-reactroot], [id^="__next"]').length;

    const isSimple = scriptCount < 5 && inputCount < 3 && buttonCount < 3 && divCount < 50 && componentsWithClasses < 40;
    const isReactLike = reactHints > 0 || scriptCount > 10 || componentsWithClasses > 100 || inputCount + buttonCount > 10;

    if (isReactLike) {
      return res.json({ result: '–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ React –∞–±–æ Angular ‚Äî —Å–∫–ª–∞–¥–Ω–∞ DOM-—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –±–∞–≥–∞—Ç–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.' });
    } else if (isSimple) {
      return res.json({ result: '–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ HTML/CSS/JavaScript ‚Äî —Å–∞–π—Ç –º–∞—î –ø—Ä–æ—Å—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É.' });
    } else {
      return res.json({ result: '–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ React –∞–±–æ HTML/CSS/JS –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–± ‚Äî —Å–∞–π—Ç –º–∞—î —Å–µ—Ä–µ–¥–Ω—é —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å.' });
    }

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞:', error.message);
    return res.status(500).json({ result: '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∞–π—Ç. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ URL –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.' });
  }
});

// üîç –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.post('/analyze-text', (req, res) => {
  const { text } = req.body;

  if (!text || text.trim().length === 0) {
    return res.status(400).json({ result: '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.' });
  }

  const lowerText = text.toLowerCase();

  const frontendKeywords = ['—Å–∞–π—Ç', '—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å', '–º–∞–∫–µ—Ç', 'html', 'css', '–ø—Ä–æ—Å—Ç–∏–π'];
  const reactKeywords = ['–¥–∏–Ω–∞–º—ñ—á–Ω–∏–π', 'spa', 'react', '–∫–æ–º–ø–æ–Ω–µ–Ω—Ç', '—Å—Ç–∞–Ω', 'redux', '–∞–Ω—ñ–º–∞—Ü—ñ—è', 'routing'];
  const angularKeywords = ['angular', '–º–æ–¥—É–ª—å', '—Ç–∏–ø—ñ–∑–∞—Ü—ñ—è', 'rxjs', 'typescript'];

  const countMatches = (keywords) =>
    keywords.reduce((count, word) => count + (lowerText.includes(word) ? 1 : 0), 0);

  const reactScore = countMatches(reactKeywords);
  const angularScore = countMatches(angularKeywords);
  const frontendScore = countMatches(frontendKeywords);

  let result;
  if (reactScore > angularScore && reactScore > frontendScore) {
    result = '–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è React ‚Äî —Å—É—á–∞—Å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –¥–ª—è —Å–∫–ª–∞–¥–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É.';
  } else if (angularScore > reactScore && angularScore > frontendScore) {
    result = '–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è Angular ‚Äî –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –º–∞—Å—à—Ç–∞–±–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤.';
  } else if (frontendScore >= reactScore && frontendScore >= angularScore) {
    result = '–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è HTML/CSS/JavaScript ‚Äî –ø—Ä–æ—Å—Ç–∏–π –∞–±–æ —Å—Ç–∞—Ç–∏—á–Ω–∏–π —Å–∞–π—Ç.';
  } else {
    result = '–ù–µ–º–∞—î –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö. –£—Ç–æ—á–Ω—ñ—Ç—å –æ–ø–∏—Å.';
  }

  res.json({ result });
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ: http://localhost:${PORT}`);
});
